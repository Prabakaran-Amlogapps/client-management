class ProjectFormPage extends StatefulWidget {
  final Project? project;

  const ProjectFormPage({this.project});

  @override
  _ProjectFormPageState createState() => _ProjectFormPageState();
}

class _ProjectFormPageState extends State<ProjectFormPage> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _projectNameController;
  late TextEditingController _clientNameController;
  late TextEditingController _totalAmountController;
  late TextEditingController _pendingAmountController;
  late TextEditingController _receivedAmountController;

  @override
  void initState() {
    super.initState();
    // Initialize controllers with existing values if editing
    _projectNameController = TextEditingController(
      text: widget.project?.projectName ?? '',
    );
    _clientNameController = TextEditingController(
      text: widget.project?.clientName ?? '',
    );
    _totalAmountController = TextEditingController(
      text: widget.project?.totalAmount.toString() ?? '',
    );
    _pendingAmountController = TextEditingController(
      text: widget.project?.pendingAmount.toString() ?? '',
    );
    _receivedAmountController = TextEditingController(
      text: widget.project?.receivedAmount.toString() ?? '',
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.project == null ? 'Create Project' : 'Edit Project'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              TextFormField(
                controller: _projectNameController,
                decoration: const InputDecoration(
                  labelText: 'Project Name',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter project name';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _clientNameController,
                decoration: const InputDecoration(
                  labelText: 'Client Name',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter client name';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _totalAmountController,
                decoration: const InputDecoration(
                  labelText: 'Total Amount',
                  border: OutlineInputBorder(),
                ),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter total amount';
                  }
                  if (double.tryParse(value) == null) {
                    return 'Please enter a valid number';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _pendingAmountController,
                decoration: const InputDecoration(
                  labelText: 'Pending Amount',
                  border: OutlineInputBorder(),
                ),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter pending amount';
                  }
                  if (double.tryParse(value) == null) {
                    return 'Please enter a valid number';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _receivedAmountController,
                decoration: const InputDecoration(
                  labelText: 'Received Amount',
                  border: OutlineInputBorder(),
                ),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter received amount';
                  }
                  if (double.tryParse(value) == null) {
                    return 'Please enter a valid number';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: () async {
                  if (_formKey.currentState!.validate()) {
                    final project = Project(
                      id: widget.project?.id ?? DateTime.now().toString(),
                      projectName: _projectNameController.text,
                      clientName: _clientNameController.text,
                      totalAmount: double.parse(_totalAmountController.text),
                      pendingAmount: double.parse(_pendingAmountController.text),
                      receivedAmount: double.parse(_receivedAmountController.text),
                      date: DateTime.now(),
                    );

                    await ProjectService().saveProject(project);
                    Navigator.pop(context);
                  }
                },
                child: Text(widget.project == null ? 'Create Project' : 'Update Project'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}